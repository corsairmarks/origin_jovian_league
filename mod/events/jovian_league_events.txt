namespace = origin_jovian_league

# triggered by empire_init_add_technologies
country_event = {
	id = origin_jovian_league.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_jovian_league = yes
	}
	immediate = {
		# set flags that wormholes have been encountered
		set_country_flag = encountered_first_wormhole
		add_seen_bypass_type = wormhole
		# wormhole techs
		if = {
			limit = {
				NOR = {
					has_technology = tech_wormhole_stabilization
					has_tech_option = tech_wormhole_stabilization
				}
			}
			add_research_option = tech_wormhole_stabilization
			if = {
				limit = { is_ai = yes }
				# the AI needs more help to get out in a timely fashion
				add_tech_progress = {
					tech = tech_wormhole_stabilization
					progress = 0.9
				}
			}
			else = {
				add_tech_progress = {
					tech = tech_wormhole_stabilization
					progress = 0.3
				}
			}
		}
		# mechanists starting techs
		if = {
			limit = { has_origin = origin_jovian_league_mechanists }
			give_technology = { message = no tech = tech_powered_exoskeletons }
			give_technology = { message = no tech = tech_robotic_workers }
			add_research_option = tech_robomodding
		}
	}
}

# triggered by empire_init_capital_planet
# from = founder species
# fromfrom = secondary species (if exists) // Corsair's Note: this appears to be broken; the default game uses last_created_species to get the secondary
planet_event = {
	id = origin_jovian_league.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = {
			is_jovian_league = yes
		}
	}
	immediate = {
		from = { save_event_target_as = jovian_league_species }
		owner = {
			setup_secondary_species = yes
			give_starting_resources_effect = yes
		}
		generate_jovian_league_capital_start_deposits_and_blockers = yes
		generate_jovian_league_capital_start_buildings_and_districts = yes
		generate_jovian_league_capital_start_pops = yes
		generate_jovian_league_capital_final_pass = yes
		solar_system = {
			# from here we can find the primary moons, T1 moons/planets, and T2 moons/planets
			save_jovian_ideal_design_pc = yes
			random_system_planet = {
				limit = { has_planet_flag = jovian_league_sibling1 }
				set_owner = root.owner
				change_colony_foundation_date = -9900
				generate_jovian_league_sibling1_start_deposits_and_blockers = yes
				generate_jovian_league_sibling1_start_buildings_and_districts = yes
				generate_jovian_league_sibling1_start_pops = yes
			}
			random_system_planet = {
				limit = { has_planet_flag = jovian_league_sibling2 }
				if = {
					limit = { root.owner = { is_biological_species_empire = yes } }
					change_to_random_secondary_pc = yes
				}
				else = {
					change_to_random_normal_pc = yes
				}
				set_owner = root.owner
				change_colony_foundation_date = -8100
				generate_jovian_league_sibling2_start_deposits_and_blockers = yes
				generate_jovian_league_sibling2_start_buildings_and_districts = yes
				generate_jovian_league_sibling2_start_pops = yes
			}
			random_system_planet = {
				limit = { has_planet_flag = jovian_league_sibling3 }
				set_owner = root.owner
				change_colony_foundation_date = -9000
				generate_jovian_league_sibling3_start_deposits_and_blockers = yes
				generate_jovian_league_sibling3_start_buildings_and_districts = yes
				generate_jovian_league_sibling3_start_pops = yes
			}
			# set up T1
			if = {
				limit = { num_guaranteed_colonies > 0 }
				every_system_planet = {
					limit = { has_planet_flag = jovian_league_t1_colony_ideal }
					if = {
						limit = { root.owner = { is_biological_species_empire = yes } }
						change_to_ideal_pc = yes
					}
					else = {
						change_to_random_normal_pc = yes
					}
				}
				every_system_planet = {
					limit = { has_planet_flag = jovian_league_t1_colony_secondary }
					if = {
						limit = { root.owner = { is_biological_species_empire = yes } }
						change_to_random_secondary_pc = yes
					}
					else = {
						change_to_random_normal_pc = yes
					}
				}
			}
			# set up T2
			if = {
				limit = { num_guaranteed_colonies > 1 }
				every_system_planet = {
					limit = { has_planet_flag = jovian_league_t2_colony_ideal }
					if = {
						limit = { root.owner = { is_biological_species_empire = yes } }
						change_to_ideal_pc = yes
					}
					else = {
						change_to_random_normal_pc = yes
					}
				}
				every_system_planet = {
					limit = { has_planet_flag = jovian_league_t2_colony_secondary }
					if = {
						limit = { root.owner = { is_biological_species_empire = yes } }
						change_to_random_secondary_pc = yes
					}
					else = {
						change_to_random_normal_pc = yes
					}
				}
			}
			generate_jovian_league_system_final_pass = yes
		}
	}
}

# triggered by on_game_start_country
country_event = {
	id = origin_jovian_league.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_jovian_league = yes
	}
	immediate = {
		# must be AFTER game_start.2, because that clears all modifiers in starting systems
		capital_scope.solar_system = {
			random_system_planet = {
				limit = { has_planet_flag = jovian_league_sibling3 }
				add_modifier = {
					modifier = low_gravity
					days = -1
				}
			}
			every_system_planet = {
				limit = {
					is_planet_class = pc_gas_giant
					has_planet_flag = jovian_league_parent
				}
				if = {
					limit = {
						NOR = {
							has_planet_modifier = pm_extensive_moon_system
							has_modifier = extensive_moon_system
						}
					}
					add_modifier = { modifier = extensive_moon_system }
				}
				planet_event = {
					id = planetary_modifier_enhancements.2
				}
			}
		}
	}
}

# triggered by on_game_start_country
country_event = {
	id = origin_jovian_league.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_jovian_league = yes
	}
	immediate = {
		# select a wormhole exit that is already connected via hyperlane
		capital_scope.solar_system = {
			save_event_target_as = jovian_league_system
			set_star_flag = jovian_league_system@root
			every_neighbor_system = { set_star_flag = jovian_league_orphan_system@root }
			random_neighbor_system = {
				limit = {
					any_neighbor_system = {
						NOR = {
							is_same_value = event_target:jovian_league_system
							has_star_flag = jovian_league_orphan_system@root
						}
					}
					has_natural_wormhole = no
					is_fe_cluster = no
					is_marauder_cluster = no
					starting_system = no
				}
				save_event_target_as = jovian_league_exit_system
			}
			if = {
				limit = { NOT = { exists = event_target:jovian_league_exit_system } }
				log = "jovian league wormhole exit from [jovian_league_system.GetName] expanding search to consider other empire start systems"
				random_neighbor_system = {
					limit = {
						any_neighbor_system = {
							NOR = {
								is_same_value = event_target:jovian_league_system
								has_star_flag = jovian_league_orphan_system@root
							}
						}
						has_natural_wormhole = no
						is_fe_cluster = no
						is_marauder_cluster = no
					}
					save_event_target_as = jovian_league_exit_system
				}
				if = {
					limit = { NOT = { exists = event_target:jovian_league_exit_system } }
					log = "jovian league wormhole exit from [jovian_league_system.GetName] expanding search to consider other fallen empire/marauder systems"
					random_neighbor_system = {
						limit = {
							any_neighbor_system = {
								NOR = {
									is_same_value = event_target:jovian_league_system
									has_star_flag = jovian_league_orphan_system@root
								}
							}
							has_natural_wormhole = no
						}
						save_event_target_as = jovian_league_exit_system
					}
					if = {
						limit = { NOT = { exists = event_target:jovian_league_exit_system } }
						log_error = "jovian league wormhole from [jovian_league_system.GetName] couldn't find a target with more than 1 hyperlane - you will probably be trapped in two isolated systems connected by a wormhole"
						random_neighbor_system = {
							limit = { has_natural_wormhole = no }
							save_event_target_as = jovian_league_exit_system
						}
						if = {
							limit = { NOT = { exists = event_target:jovian_league_exit_system } }
							log_error = "jovian league wormhole from [jovian_league_system.GetName] couldn't find a target without another wormhole - things might get weird with two wormholes in one system"
							random_neighbor_system = {
								save_event_target_as = jovian_league_exit_system
							}
						}
					}
				}
			}
		}

		if = {
			limit = { exists = event_target:jovian_league_exit_system }
			log = "jovian league wormhole exit from [jovian_league_system.GetName] for the [Root.GetRealName] is [jovian_league_exit_system.GetName]"

			# spawn wormholes
			event_target:jovian_league_exit_system = {
				set_star_flag = jovian_league_exit_system@root
				event_target:jovian_league_system = {
					prev = { # done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
						spawn_natural_wormhole = {
							bypass_type = wormhole
							random_pos = yes
						}
					}
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = no
						orbit_angle = 270
						orbit_distance = 500
					}
					link_wormholes = prev
				}
			}

			# isolate system
			event_target:jovian_league_system = {
				every_neighbor_system = {
					remove_hyperlane = {
						from = prev
						to = this
					}
					log = "[This.GetName] neighbored [Prev.GetName]; removed hyperlane between them"
				}
			}

			country_event = {
				id = origin_jovian_league.9
				days = 1
				scopes = {
					from = event_target:jovian_league_exit_system
					fromfrom = event_target:jovian_league_system
				}
			}
		}
		else = {
			log_error = "jovian league wormhole for [jovian_league_system.GetName] couldn't find any valid targets - some trickery must be afoot, so the system was NOT isolated"
		}
	}
}

# re-evaluate citizenship for the syncretic species/prepatents for non-fanatic purifiers
# the game rules probably set them to purge if the country has xenophobic ethics
country_event = {
	id = origin_jovian_league.5
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			has_origin = origin_jovian_league_syncretic
			has_origin = origin_jovian_league_necrophage
		}
	}
	immediate = {
		if = {
			limit = { NOT = { has_valid_civic = civic_fanatic_purifiers } }
			# reset syncretic species/prepatents to slavery if they were set to purge
			every_owned_species = {
				limit = {
					has_species_flag = syncretic_species@root
					has_citizenship_type = {
						country = root
						type = citizenship_purge
					}
				}
				set_citizenship_type = {
					country = root
					type = citizenship_slavery
					cooldown = no
				}
				set_military_service_type = {
					country = root
					type = military_service_limited
					cooldown = no
				}
				set_colonization_controls = {
					country = root
					type = colonization_control_no
					cooldown = no
				}
				set_population_controls = {
					country = root
					type = population_control_no
					cooldown = no
				}
				set_migration_controls = {
					country = root
					type = migration_control_no
					cooldown = no
				}
			}
			# doesn't seem possible to reset default species rights, but players and the AI can change them as they see fit
		}
	}
}

# triggered by on_game_start_country
country_event = {
	id = origin_jovian_league.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_jovian_league = yes
	}
	immediate = {
		every_owned_planet = {
			limit = { is_colony = yes }
			check_planet_employment = yes
		}
	}
}

# triggered by on_building_replaced and on_building_demolished
planet_event = {
	id = origin_jovian_league.7
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_deposit = d_mothballed_sanctuary_factories
		NOR = {
			owner = { has_valid_civic = civic_machine_servitor }
			has_building = building_organic_sanctuary
			has_building = building_organic_paradise
		}
	}
	immediate = {
		every_deposit = {
			limit = { is_deposit_type = d_mothballed_sanctuary_factories }
			remove_deposit = yes
		}
	}
}

# triggered by on_game_start_country
country_event = {
	id = origin_jovian_league.8
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_agrarian_idyll_lithoid_active = yes
		is_jovian_league = yes
		has_valid_civic = civic_agrarian_idyll
	}
	immediate = {
		capital_scope.solar_system = {
			every_system_planet = {
				limit = { is_colony = yes }
				while = {
					limit = { has_district = district_city }
					remove_district = district_city
					ojl_add_species_appropriate_food_district = yes
				}
			}
		}
	}
}

# triggered manually 1 day after game start in order to reconnect any sections
# of the map isolated by jovian league starting system isolation
# root = country
# from = galactic_object, jovian league wormhole exit system
# fromfrom = galactic_object, jovian league starting system
country_event = {
	id = origin_jovian_league.9
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = capital_scope
		capital_scope.solar_system = { has_star_flag = jovian_league_system@prev }
	}
	immediate = {
		log = "origin_jovian_league.9 check for isolated stars systems/\"clusters\" created when isolating [FromFrom.GetName] for the [This.GetRealName]"
		# attempt to re-network the now-disconnected systems to the exit system
		every_system = {
			limit = {
				has_star_flag = jovian_league_orphan_system@root
				NOR = {
					has_star_flag = jovian_league_exit_system@root
					distance = {
						source = from
						type = hyperlane
						use_bypasses = no
						min_jumps > 1
						max_jumps <= 10
					}
				}
			}
			log = "[This.GetName] was more than 10 jumps from [From.GetName]; adding hyperlane between them"
			add_hyperlane = {
				from = this
				to = from
			}
		}
	}
}